{
	// Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Bash basic template": {
		"prefix": "bashtpl",
		"body": [
			"#!/usr/bin/env bash",
			"# @nekwebdev",
			"# LICENSE: GPLv3",
			"set -e",
			"",
			"###### => dependencies check ###################################################",
			"for name in ${1:List of deps}; do",
			"  [[ $(which $name 2>/dev/null) ]] || { echo -en \"\nInstall $name.\";deps=1; }",
			"done",
			"if [[ $deps -eq 1 ]]; then",
			"  { echo -en \"\nInstall the above before running this script\n\";exit 1; }",
			"fi",
			"",
			"###### => display help screen ##################################################",
			"function display_help() {",
			"  echo \"  Description:\"",
			"  echo \"    ${2:First line of description}\"",
			"  echo \"    ${3:Second line of description}\"",
			"  echo",
			"  echo \"  Usage:\"",
			"  echo \"    ${4:$TM_FILENAME}\"",
			"  echo \"    ${5:$TM_FILENAME} [--${6:flag}] <${7:arg}>\"",
			"  echo",
			"  echo \"  Options:\"",
			"  echo \"    --help                 Show this screen.\"",
			"  echo \"    --${6:flag} <${7:arg}>  ${8:Command description}\"",
			"  echo",
			"  exit 0",
			"}",
			"",
			"###### => parse arguments ######################################################",
			"last_input=\"\"",
			"while (( \"\\$#\" )); do",
			"case \"\\$1\" in",
			"  -h|--help)",
			"  display_help; shift",
			"  ;;",
			"  # -a|--arg) # example for arg with input",
			"  #   if [ -n \"\\$2\" ] && [ \"\\${2:0:1}\" != \"-\" ]; then",
			"  #     value_1=\\$2; shift 2",
			"  #   fi",
			"  #   ;;",
			"  # -b|--barg) # example for required arg",
			"  #   if [ -n \"\\$2\" ] && [ \\${2:0:1} != \"-\" ]; then",
			"  #     value_2=\\$2; shift 2",
			"  #   else",
			"  #     echo \"Error: Argument for \\$1 is missing\" >&2; exit 1",
			"  #   fi",
			"  #   ;;",
			"  --*|-*=) # unsupported flags",
			"  echo \"Error: Unsupported flag \\$1\" >&2; exit 1",
			"  ;;",
			"  *) # preserve positional arguments and get last input",
			"  last_input=\"\\$last_input \\$1\"; shift",
			"  ;;",
			"esac",
			"done",
			"",
			"###### => variables ############################################################",
			"$9",
			"###### => functions ############################################################",
			"",
			"###### => main #################################################################",
			"",

		]
	}
}